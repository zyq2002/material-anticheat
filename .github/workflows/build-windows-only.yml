name: Build Windows Only

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build-windows:
    runs-on: windows-latest
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 设置 Python (Python脚本支持)
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: 安装 Python 依赖
      run: |
        python -m pip install --upgrade pip
        if (Test-Path "python_scripts/requirements.txt") {
          pip install -r python_scripts/requirements.txt
        } else {
          echo "警告: python_scripts/requirements.txt 不存在，跳过Python依赖安装"
        }
      shell: powershell
      
    - name: 设置 Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.24.0'
        channel: 'stable'
        
    - name: 验证项目结构和环境
      run: |
        echo "=== 当前工作目录 ==="
        pwd
        echo ""
        echo "=== 目录内容 ==="
        Get-ChildItem | Format-Table Name, Length, LastWriteTime
        echo ""
        echo "=== 检查关键文件 ==="
        if (Test-Path "pubspec.yaml") { 
          echo "✅ pubspec.yaml 存在" 
        } else { 
          echo "❌ pubspec.yaml 不存在" 
          exit 1
        }
        echo ""
        echo "=== Flutter 版本信息 ==="
        flutter --version
      shell: powershell
        
    - name: 启用 Windows 桌面支持
      run: flutter config --enable-windows-desktop
      
    - name: 清理并获取依赖
      run: |
        echo "=== 清理项目 ==="
        flutter clean
        echo ""
        echo "=== 获取依赖 ==="
        flutter pub get
      
    - name: 分析代码 (可选)
      run: flutter analyze
      continue-on-error: true
      
    - name: 构建 Windows 应用
      run: |
        echo "=== 开始构建 Windows 应用 ==="
        flutter build windows --release --verbose
      
    - name: 验证构建结果
      run: |
        echo "=== 检查构建目录 ==="
        $buildPath = "build/windows/x64/runner/Release"
        if (Test-Path $buildPath) {
          echo "✅ 构建目录存在: $buildPath"
          echo ""
          echo "=== 构建产物列表 ==="
          Get-ChildItem $buildPath -Recurse | Format-Table Name, Length, LastWriteTime
          echo ""
          echo "=== 可执行文件检查 ==="
          $exeFiles = Get-ChildItem $buildPath -Filter "*.exe" -Recurse
          if ($exeFiles.Count -gt 0) {
            echo "✅ 找到可执行文件:"
            foreach ($file in $exeFiles) {
              echo "  - $($file.FullName)"
            }
          } else {
            echo "❌ 未找到可执行文件"
          }
        } else {
          echo "❌ 构建目录不存在: $buildPath"
          exit 1
        }
      shell: powershell
      
    - name: 创建 Windows 应用包
      run: |
        $sourceDir = "build/windows/x64/runner/Release"
        $packageDir = "物资anticheat-windows"
        
        echo "=== 创建应用包 ==="
        if (Test-Path $packageDir) { 
          Remove-Item $packageDir -Recurse -Force 
        }
        New-Item -ItemType Directory -Path $packageDir -Force
        
        echo "=== 复制文件 ==="
        Copy-Item -Path "$sourceDir/*" -Destination $packageDir -Recurse -Force
        
        echo "=== 验证应用包 ==="
        if (Test-Path $packageDir) {
          echo "✅ 应用包创建成功"
          Get-ChildItem $packageDir | Format-Table Name, Length, LastWriteTime
        } else {
          echo "❌ 应用包创建失败"
          exit 1
        }
      shell: powershell
        
    - name: 压缩应用
      run: |
        $packageDir = "物资anticheat-windows"
        $zipName = "物资anticheat-windows-x64.zip"
        
        echo "=== 创建压缩包 ==="
        if (Test-Path $zipName) { 
          Remove-Item $zipName -Force 
        }
        
        Compress-Archive -Path "$packageDir/*" -DestinationPath $zipName -Force
        
        echo "=== 验证压缩包 ==="
        if (Test-Path $zipName) {
          $zipInfo = Get-Item $zipName
          echo "✅ 压缩包创建成功"
          echo "   文件名: $($zipInfo.Name)"
          echo "   大小: $([math]::Round($zipInfo.Length/1MB,2)) MB"
          echo "   创建时间: $($zipInfo.CreationTime)"
        } else {
          echo "❌ 压缩包创建失败"
          exit 1
        }
      shell: powershell
        
    - name: 上传构建产物
      uses: actions/upload-artifact@v4
      with:
        name: windows-build-only
        path: 物资anticheat-windows-x64.zip
        retention-days: 30
        
    - name: 构建摘要
      run: |
        echo "=== 构建完成摘要 ==="
        echo "✅ Windows 应用构建成功"
        echo "📦 构建产物: 物资anticheat-windows-x64.zip"
        echo "🕒 构建时间: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')"
        echo ""
        echo "=== 下载说明 ==="
        echo "1. 进入 GitHub Actions 页面"
        echo "2. 找到此次构建记录"
        echo "3. 下载 'windows-build-only' 构建产物"
        echo "4. 解压后即可使用"
      shell: powershell