name: Build Multi-Platform Apps

on:
  push:
    branches: [ main, master ]
    tags: 
      - 'v*'
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      create_release:
        description: '是否创建 Release'
        required: false
        default: 'false'
        type: choice
        options:
        - 'true'
        - 'false'

env:
  FLUTTER_VERSION: '3.24.0'
  PYTHON_VERSION: '3.11'

jobs:
  build:
    strategy:
      matrix:
        include:
          - os: windows-latest
            platform: windows
            artifact-name: windows-app
            build-cmd: flutter build windows --release --verbose
            verify-path: build/windows/x64/runner/Release/material_anticheat.exe
          - os: macos-latest
            platform: macos
            artifact-name: macos-app
            build-cmd: flutter build macos --release --verbose
            verify-path: build/macos/Build/Products/Release/material_anticheat.app
    
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: 设置 Python 环境
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 安装 Python 依赖 (Windows)
      if: matrix.platform == 'windows'
      run: |
        python -m pip install --upgrade pip
        if exist requirements.txt pip install -r requirements.txt
      shell: cmd
      
    - name: 安装 Python 依赖 (macOS)
      if: matrix.platform == 'macos'
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        
    - name: 设置 Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'
        cache: true
        cache-key: flutter-${{ env.FLUTTER_VERSION }}
        
    - name: Flutter 缓存
      uses: actions/cache@v3
      with:
        path: |
          ~/.pub-cache
          ${{ runner.tool_cache }}/flutter
        key: ${{ runner.os }}-flutter-${{ env.FLUTTER_VERSION }}-${{ hashFiles('**/pubspec.lock') }}
        restore-keys: |
          ${{ runner.os }}-flutter-${{ env.FLUTTER_VERSION }}-
          ${{ runner.os }}-flutter-
        
    - name: 启用桌面支持
      run: |
        flutter config --enable-windows-desktop
        flutter config --enable-macos-desktop
      
    - name: 检查 Flutter 状态
      run: flutter doctor -v
      
    - name: 获取依赖
      run: flutter pub get
      
    - name: 代码生成
      run: flutter packages pub run build_runner build --delete-conflicting-outputs
      
    - name: 分析代码
      run: flutter analyze
      continue-on-error: true
      
    - name: 运行测试
      run: flutter test
      continue-on-error: true
      
    - name: 构建应用
      run: ${{ matrix.build-cmd }}
      
    - name: 验证构建结果 (Windows)
      if: matrix.platform == 'windows'
      run: |
        if exist "${{ matrix.verify-path }}" (
          echo ✅ Windows应用构建成功
          dir "build\windows\x64\runner\Release\"
        ) else (
          echo ❌ 构建失败 - exe文件不存在
          exit 1
        )
      shell: cmd
      
    - name: 验证构建结果 (macOS)
      if: matrix.platform == 'macos'
      run: |
        if [ -d "${{ matrix.verify-path }}" ]; then
          echo "✅ macOS应用构建成功"
          ls -la build/macos/Build/Products/Release/
        else
          echo "❌ 构建失败 - app文件不存在"
          exit 1
        fi
        
    - name: 打包 Windows 应用
      if: matrix.platform == 'windows'
      run: |
        echo 📦 创建Windows应用包...
        if exist "package" rmdir /s /q "package"
        mkdir package
        
        xcopy "build\windows\x64\runner\Release\*" "package\" /s /e /y /i
        
        if exist "README_WINDOWS.md" copy "README_WINDOWS.md" "package\README.md"
        if exist "物资anticheat-发布说明.md" copy "物资anticheat-发布说明.md" "package\"
        
        echo 物资anticheat Windows版本 > package\VERSION.txt
        echo 构建时间: %date% %time% >> package\VERSION.txt
        echo 构建分支: ${{ github.ref_name }} >> package\VERSION.txt
        echo 提交哈希: ${{ github.sha }} >> package\VERSION.txt
        
        powershell Compress-Archive -Path "package\*" -DestinationPath "material-anticheat-${{ matrix.platform }}.zip" -CompressionLevel Optimal
        
        REM 创建便携版
        if exist "portable" rmdir /s /q "portable"
        mkdir portable
        xcopy "package\*" "portable\" /s /e /y /i
        echo @echo off > portable\启动应用.bat
        echo cd /d "%%~dp0" >> portable\启动应用.bat
        echo material_anticheat.exe >> portable\启动应用.bat
        echo pause >> portable\启动应用.bat
        
        powershell Compress-Archive -Path "portable\*" -DestinationPath "material-anticheat-${{ matrix.platform }}-portable.zip" -CompressionLevel Optimal
      shell: cmd
        
    - name: 打包 macOS 应用
      if: matrix.platform == 'macos'
      run: |
        echo "📦 创建macOS应用包..."
        rm -rf package
        mkdir -p package
        
        cp -R "${{ matrix.verify-path }}" package/
        
        if [ -f "README_WINDOWS.md" ]; then
          cp README_WINDOWS.md package/README.md
        fi
        if [ -f "物资anticheat-发布说明.md" ]; then
          cp "物资anticheat-发布说明.md" package/
        fi
        
        cat > package/VERSION.txt << EOF
        物资anticheat macOS版本
        构建时间: $(date)
        构建分支: ${{ github.ref_name }}
        提交哈希: ${{ github.sha }}
        Flutter版本: ${{ env.FLUTTER_VERSION }}
        EOF
        
        # 创建安装脚本
        cat > package/install.sh << 'EOF'
        #!/bin/bash
        echo "🚀 物资anticheat macOS 安装脚本"
        if [ ! -w "/Applications" ]; then
            echo "需要管理员权限..."
            sudo cp -R material_anticheat.app /Applications/
        else
            cp -R material_anticheat.app /Applications/
        fi
        echo "✅ 安装完成！"
        EOF
        chmod +x package/install.sh
        
        # 创建ZIP包
        cd package && zip -r ../material-anticheat-${{ matrix.platform }}.zip . && cd ..
        
        # 创建DMG
        mkdir -p dmg-temp
        cp -R package/material_anticheat.app dmg-temp/
        ln -s /Applications dmg-temp/Applications
        hdiutil create -volname "物资anticheat" -srcfolder dmg-temp -ov -format UDZO material-anticheat-${{ matrix.platform }}.dmg
        
    - name: 上传构建产物
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact-name }}-${{ github.run_number }}
        path: |
          material-anticheat-${{ matrix.platform }}.*
        retention-days: 90
        
  create-release:
    needs: build
    runs-on: ubuntu-latest
    if: (startsWith(github.ref, 'refs/tags/v') || (github.event_name == 'workflow_dispatch' && github.event.inputs.create_release == 'true'))
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 下载所有构建产物
      uses: actions/download-artifact@v4
      with:
        path: artifacts
        
    - name: 整理发布文件
      run: |
        mkdir -p release-files
        find artifacts -name "*.zip" -o -name "*.dmg" | xargs -I {} cp {} release-files/
        ls -la release-files/
        
    - name: 创建 Release
      uses: softprops/action-gh-release@v1
      with:
        files: release-files/*
        name: 物资anticheat 跨平台版 ${{ github.ref_name }}
        body: |
          🎉 物资anticheat 跨平台版本发布
          
          📦 **包含内容:**
          
          **Windows版本:**
          - `material-anticheat-windows.zip` - 标准版
          - `material-anticheat-windows-portable.zip` - 便携版
          
          **macOS版本:**
          - `material-anticheat-macos.zip` - 应用包
          - `material-anticheat-macos.dmg` - DMG安装包 (推荐)
          
          🚀 **系统要求:**
          - **Windows**: Windows 10+ (x64)
          - **macOS**: macOS 10.14+ (Intel/Apple Silicon)
          - 4GB+ 内存，500MB+ 存储空间
          
          📋 **安装说明:**
          
          **Windows用户:**
          1. 下载并解压对应zip文件
          2. 双击 `material_anticheat.exe` 启动
          3. 便携版包含 `启动应用.bat` 脚本
          
          **macOS用户:**
          1. 推荐下载DMG文件，拖拽安装
          2. 或解压ZIP文件，运行 `install.sh`
          3. 首次运行右键选择"打开"
          
          🔧 **构建信息:**
          - 构建时间: ${{ github.event.head_commit.timestamp }}
          - 提交: ${{ github.sha }}
          - Flutter: ${{ env.FLUTTER_VERSION }}
          
          📝 **更新内容:**
          ${{ github.event.head_commit.message }}
        draft: false
        prerelease: contains(github.ref_name, 'beta') || contains(github.ref_name, 'alpha')
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 