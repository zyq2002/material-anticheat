name: Build Fix - Multi-Platform Flutter App

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build-windows:
    runs-on: windows-latest
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 设置 Python (Python脚本支持)
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: 安装 Python 依赖
      run: |
        python -m pip install --upgrade pip
        pip install -r python_scripts/requirements.txt
      
    - name: 设置 Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.24.0'
        channel: 'stable'
        
    - name: 验证项目结构和环境
      run: |
        echo "=== 当前工作目录 ==="
        pwd
        echo ""
        echo "=== 目录内容 ==="
        dir
        echo ""
        echo "=== 检查关键文件 ==="
        if (Test-Path "pubspec.yaml") { 
          echo "✅ pubspec.yaml 存在" 
          echo "=== pubspec.yaml 内容预览 ==="
          Get-Content "pubspec.yaml" | Select-Object -First 10
        } else { 
          echo "❌ pubspec.yaml 不存在" 
        }
        echo ""
        echo "=== Flutter 版本信息 ==="
        flutter --version
        echo ""
        echo "=== Flutter 医生检查 ==="
        flutter doctor -v
      shell: powershell
        
    - name: 启用 Windows 桌面支持
      run: flutter config --enable-windows-desktop
      
    - name: 清理并获取依赖
      run: |
        flutter clean
        flutter pub get
      
    - name: 分析代码 (可选)
      run: flutter analyze
      continue-on-error: true
      
    - name: 构建 Windows 应用
      run: flutter build windows --release
      
    - name: 验证构建结果
      run: |
        echo "=== 检查构建目录 ==="
        if (Test-Path "build/windows/x64/runner/Release") {
          echo "✅ 构建目录存在"
          echo "=== 构建产物列表 ==="
          dir "build/windows/x64/runner/Release"
        } else {
          echo "❌ 构建目录不存在"
          exit 1
        }
      shell: powershell
      
    - name: 创建 Windows 应用包
      run: |
        $packageDir = "windows-package"
        if (Test-Path $packageDir) { Remove-Item $packageDir -Recurse -Force }
        New-Item -ItemType Directory -Path $packageDir
        Copy-Item -Path "build/windows/x64/runner/Release/*" -Destination $packageDir -Recurse
        echo "=== 应用包内容 ==="
        dir $packageDir
      shell: powershell
        
    - name: 压缩应用
      run: |
        $zipName = "物资anticheat-windows-x64.zip"
        if (Test-Path $zipName) { Remove-Item $zipName -Force }
        Compress-Archive -Path "windows-package/*" -DestinationPath $zipName
        echo "=== 压缩包信息 ==="
        if (Test-Path $zipName) {
          $zipInfo = Get-Item $zipName
          echo "✅ 压缩包创建成功: $($zipInfo.Name), 大小: $([math]::Round($zipInfo.Length/1MB,2)) MB"
        } else {
          echo "❌ 压缩包创建失败"
          exit 1
        }
      shell: powershell
        
    - name: 上传构建产物
      uses: actions/upload-artifact@v4
      with:
        name: windows-build-fixed
        path: 物资anticheat-windows-x64.zip
        
    - name: 创建发布 (如果是tag)
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: 物资anticheat-windows-x64.zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-macos:
    runs-on: macos-latest
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 设置 Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.24.0'
        channel: 'stable'
        
    - name: 启用 macOS 桌面支持
      run: flutter config --enable-macos-desktop
      
    - name: 获取依赖
      run: flutter pub get
      
    - name: 构建 macOS 应用
      run: flutter build macos --release
      
    - name: 创建 macOS 压缩包
      run: |
        cd build/macos/Build/Products/Release
        zip -r "../../../../../物资anticheat-macOS.zip" material_anticheat.app
      
    - name: 上传 macOS 构建产物
      uses: actions/upload-artifact@v4
      with:
        name: macos-build-fixed
        path: 物资anticheat-macOS.zip 